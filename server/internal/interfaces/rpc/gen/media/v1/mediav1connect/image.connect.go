// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: media/v1/image.proto

package mediav1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mcorrigan89/bigapp/server/internal/interfaces/rpc/gen/media/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ImageServiceName is the fully-qualified name of the ImageService service.
	ImageServiceName = "media.v1.ImageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ImageServiceGetImageByIdProcedure is the fully-qualified name of the ImageService's GetImageById
	// RPC.
	ImageServiceGetImageByIdProcedure = "/media.v1.ImageService/GetImageById"
	// ImageServiceGetCollectionByIdProcedure is the fully-qualified name of the ImageService's
	// GetCollectionById RPC.
	ImageServiceGetCollectionByIdProcedure = "/media.v1.ImageService/GetCollectionById"
	// ImageServiceGetCollectionByOwnerIdProcedure is the fully-qualified name of the ImageService's
	// GetCollectionByOwnerId RPC.
	ImageServiceGetCollectionByOwnerIdProcedure = "/media.v1.ImageService/GetCollectionByOwnerId"
	// ImageServiceGetCollectionByOwnerTokenProcedure is the fully-qualified name of the ImageService's
	// GetCollectionByOwnerToken RPC.
	ImageServiceGetCollectionByOwnerTokenProcedure = "/media.v1.ImageService/GetCollectionByOwnerToken"
	// ImageServiceCreateCollectionProcedure is the fully-qualified name of the ImageService's
	// CreateCollection RPC.
	ImageServiceCreateCollectionProcedure = "/media.v1.ImageService/CreateCollection"
)

// ImageServiceClient is a client for the media.v1.ImageService service.
type ImageServiceClient interface {
	GetImageById(context.Context, *connect.Request[v1.GetImageByIdRequest]) (*connect.Response[v1.GetImageByIdResponse], error)
	GetCollectionById(context.Context, *connect.Request[v1.GetCollectionByIdRequest]) (*connect.Response[v1.GetCollectionByIdResponse], error)
	GetCollectionByOwnerId(context.Context, *connect.Request[v1.GetCollectionByOwnerIdRequest]) (*connect.Response[v1.GetCollectionByOwnerIdResponse], error)
	GetCollectionByOwnerToken(context.Context, *connect.Request[v1.GetCollectionByOwnerTokenRequest]) (*connect.Response[v1.GetCollectionByOwnerTokenResponse], error)
	CreateCollection(context.Context, *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CreateCollectionResponse], error)
}

// NewImageServiceClient constructs a client for the media.v1.ImageService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewImageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ImageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	imageServiceMethods := v1.File_media_v1_image_proto.Services().ByName("ImageService").Methods()
	return &imageServiceClient{
		getImageById: connect.NewClient[v1.GetImageByIdRequest, v1.GetImageByIdResponse](
			httpClient,
			baseURL+ImageServiceGetImageByIdProcedure,
			connect.WithSchema(imageServiceMethods.ByName("GetImageById")),
			connect.WithClientOptions(opts...),
		),
		getCollectionById: connect.NewClient[v1.GetCollectionByIdRequest, v1.GetCollectionByIdResponse](
			httpClient,
			baseURL+ImageServiceGetCollectionByIdProcedure,
			connect.WithSchema(imageServiceMethods.ByName("GetCollectionById")),
			connect.WithClientOptions(opts...),
		),
		getCollectionByOwnerId: connect.NewClient[v1.GetCollectionByOwnerIdRequest, v1.GetCollectionByOwnerIdResponse](
			httpClient,
			baseURL+ImageServiceGetCollectionByOwnerIdProcedure,
			connect.WithSchema(imageServiceMethods.ByName("GetCollectionByOwnerId")),
			connect.WithClientOptions(opts...),
		),
		getCollectionByOwnerToken: connect.NewClient[v1.GetCollectionByOwnerTokenRequest, v1.GetCollectionByOwnerTokenResponse](
			httpClient,
			baseURL+ImageServiceGetCollectionByOwnerTokenProcedure,
			connect.WithSchema(imageServiceMethods.ByName("GetCollectionByOwnerToken")),
			connect.WithClientOptions(opts...),
		),
		createCollection: connect.NewClient[v1.CreateCollectionRequest, v1.CreateCollectionResponse](
			httpClient,
			baseURL+ImageServiceCreateCollectionProcedure,
			connect.WithSchema(imageServiceMethods.ByName("CreateCollection")),
			connect.WithClientOptions(opts...),
		),
	}
}

// imageServiceClient implements ImageServiceClient.
type imageServiceClient struct {
	getImageById              *connect.Client[v1.GetImageByIdRequest, v1.GetImageByIdResponse]
	getCollectionById         *connect.Client[v1.GetCollectionByIdRequest, v1.GetCollectionByIdResponse]
	getCollectionByOwnerId    *connect.Client[v1.GetCollectionByOwnerIdRequest, v1.GetCollectionByOwnerIdResponse]
	getCollectionByOwnerToken *connect.Client[v1.GetCollectionByOwnerTokenRequest, v1.GetCollectionByOwnerTokenResponse]
	createCollection          *connect.Client[v1.CreateCollectionRequest, v1.CreateCollectionResponse]
}

// GetImageById calls media.v1.ImageService.GetImageById.
func (c *imageServiceClient) GetImageById(ctx context.Context, req *connect.Request[v1.GetImageByIdRequest]) (*connect.Response[v1.GetImageByIdResponse], error) {
	return c.getImageById.CallUnary(ctx, req)
}

// GetCollectionById calls media.v1.ImageService.GetCollectionById.
func (c *imageServiceClient) GetCollectionById(ctx context.Context, req *connect.Request[v1.GetCollectionByIdRequest]) (*connect.Response[v1.GetCollectionByIdResponse], error) {
	return c.getCollectionById.CallUnary(ctx, req)
}

// GetCollectionByOwnerId calls media.v1.ImageService.GetCollectionByOwnerId.
func (c *imageServiceClient) GetCollectionByOwnerId(ctx context.Context, req *connect.Request[v1.GetCollectionByOwnerIdRequest]) (*connect.Response[v1.GetCollectionByOwnerIdResponse], error) {
	return c.getCollectionByOwnerId.CallUnary(ctx, req)
}

// GetCollectionByOwnerToken calls media.v1.ImageService.GetCollectionByOwnerToken.
func (c *imageServiceClient) GetCollectionByOwnerToken(ctx context.Context, req *connect.Request[v1.GetCollectionByOwnerTokenRequest]) (*connect.Response[v1.GetCollectionByOwnerTokenResponse], error) {
	return c.getCollectionByOwnerToken.CallUnary(ctx, req)
}

// CreateCollection calls media.v1.ImageService.CreateCollection.
func (c *imageServiceClient) CreateCollection(ctx context.Context, req *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CreateCollectionResponse], error) {
	return c.createCollection.CallUnary(ctx, req)
}

// ImageServiceHandler is an implementation of the media.v1.ImageService service.
type ImageServiceHandler interface {
	GetImageById(context.Context, *connect.Request[v1.GetImageByIdRequest]) (*connect.Response[v1.GetImageByIdResponse], error)
	GetCollectionById(context.Context, *connect.Request[v1.GetCollectionByIdRequest]) (*connect.Response[v1.GetCollectionByIdResponse], error)
	GetCollectionByOwnerId(context.Context, *connect.Request[v1.GetCollectionByOwnerIdRequest]) (*connect.Response[v1.GetCollectionByOwnerIdResponse], error)
	GetCollectionByOwnerToken(context.Context, *connect.Request[v1.GetCollectionByOwnerTokenRequest]) (*connect.Response[v1.GetCollectionByOwnerTokenResponse], error)
	CreateCollection(context.Context, *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CreateCollectionResponse], error)
}

// NewImageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewImageServiceHandler(svc ImageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	imageServiceMethods := v1.File_media_v1_image_proto.Services().ByName("ImageService").Methods()
	imageServiceGetImageByIdHandler := connect.NewUnaryHandler(
		ImageServiceGetImageByIdProcedure,
		svc.GetImageById,
		connect.WithSchema(imageServiceMethods.ByName("GetImageById")),
		connect.WithHandlerOptions(opts...),
	)
	imageServiceGetCollectionByIdHandler := connect.NewUnaryHandler(
		ImageServiceGetCollectionByIdProcedure,
		svc.GetCollectionById,
		connect.WithSchema(imageServiceMethods.ByName("GetCollectionById")),
		connect.WithHandlerOptions(opts...),
	)
	imageServiceGetCollectionByOwnerIdHandler := connect.NewUnaryHandler(
		ImageServiceGetCollectionByOwnerIdProcedure,
		svc.GetCollectionByOwnerId,
		connect.WithSchema(imageServiceMethods.ByName("GetCollectionByOwnerId")),
		connect.WithHandlerOptions(opts...),
	)
	imageServiceGetCollectionByOwnerTokenHandler := connect.NewUnaryHandler(
		ImageServiceGetCollectionByOwnerTokenProcedure,
		svc.GetCollectionByOwnerToken,
		connect.WithSchema(imageServiceMethods.ByName("GetCollectionByOwnerToken")),
		connect.WithHandlerOptions(opts...),
	)
	imageServiceCreateCollectionHandler := connect.NewUnaryHandler(
		ImageServiceCreateCollectionProcedure,
		svc.CreateCollection,
		connect.WithSchema(imageServiceMethods.ByName("CreateCollection")),
		connect.WithHandlerOptions(opts...),
	)
	return "/media.v1.ImageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ImageServiceGetImageByIdProcedure:
			imageServiceGetImageByIdHandler.ServeHTTP(w, r)
		case ImageServiceGetCollectionByIdProcedure:
			imageServiceGetCollectionByIdHandler.ServeHTTP(w, r)
		case ImageServiceGetCollectionByOwnerIdProcedure:
			imageServiceGetCollectionByOwnerIdHandler.ServeHTTP(w, r)
		case ImageServiceGetCollectionByOwnerTokenProcedure:
			imageServiceGetCollectionByOwnerTokenHandler.ServeHTTP(w, r)
		case ImageServiceCreateCollectionProcedure:
			imageServiceCreateCollectionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedImageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedImageServiceHandler struct{}

func (UnimplementedImageServiceHandler) GetImageById(context.Context, *connect.Request[v1.GetImageByIdRequest]) (*connect.Response[v1.GetImageByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("media.v1.ImageService.GetImageById is not implemented"))
}

func (UnimplementedImageServiceHandler) GetCollectionById(context.Context, *connect.Request[v1.GetCollectionByIdRequest]) (*connect.Response[v1.GetCollectionByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("media.v1.ImageService.GetCollectionById is not implemented"))
}

func (UnimplementedImageServiceHandler) GetCollectionByOwnerId(context.Context, *connect.Request[v1.GetCollectionByOwnerIdRequest]) (*connect.Response[v1.GetCollectionByOwnerIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("media.v1.ImageService.GetCollectionByOwnerId is not implemented"))
}

func (UnimplementedImageServiceHandler) GetCollectionByOwnerToken(context.Context, *connect.Request[v1.GetCollectionByOwnerTokenRequest]) (*connect.Response[v1.GetCollectionByOwnerTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("media.v1.ImageService.GetCollectionByOwnerToken is not implemented"))
}

func (UnimplementedImageServiceHandler) CreateCollection(context.Context, *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CreateCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("media.v1.ImageService.CreateCollection is not implemented"))
}
